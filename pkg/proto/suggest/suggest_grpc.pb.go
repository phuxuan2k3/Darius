// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/suggest/suggest.proto

package suggest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuggestServiceClient is the client API for SuggestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggestServiceClient interface {
	SuggestCriteria(ctx context.Context, in *SuggestCriteriaRequest, opts ...grpc.CallOption) (*SuggestCriteriaResponse, error)
	SuggestOptions(ctx context.Context, in *SuggestOptionsRequest, opts ...grpc.CallOption) (*SuggestOptionsResponse, error)
	SuggestQuestions(ctx context.Context, in *SuggestQuestionsRequest, opts ...grpc.CallOption) (*SuggestQuestionsResponse, error)
	SuggestInterviewQuestion(ctx context.Context, in *SuggestInterviewQuestionRequest, opts ...grpc.CallOption) (*SuggestInterviewQuestionResponse, error)
	ScoreInterview(ctx context.Context, in *ScoreInterviewRequest, opts ...grpc.CallOption) (*ScoreInterviewResponse, error)
	SuggestOutlines(ctx context.Context, in *SuggestOutlinesRequest, opts ...grpc.CallOption) (*SuggestOutlinesResponse, error)
	SuggestExamQuestion(ctx context.Context, in *SuggestExamQuestionRequest, opts ...grpc.CallOption) (*SuggestExamQuestionResponse, error)
	SuggestExamQuestionV2(ctx context.Context, in *SuggestExamQuestionRequest, opts ...grpc.CallOption) (*SuggestExamQuestionResponseV2, error)
}

type suggestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggestServiceClient(cc grpc.ClientConnInterface) SuggestServiceClient {
	return &suggestServiceClient{cc}
}

func (c *suggestServiceClient) SuggestCriteria(ctx context.Context, in *SuggestCriteriaRequest, opts ...grpc.CallOption) (*SuggestCriteriaResponse, error) {
	out := new(SuggestCriteriaResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/SuggestCriteria", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestOptions(ctx context.Context, in *SuggestOptionsRequest, opts ...grpc.CallOption) (*SuggestOptionsResponse, error) {
	out := new(SuggestOptionsResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/SuggestOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestQuestions(ctx context.Context, in *SuggestQuestionsRequest, opts ...grpc.CallOption) (*SuggestQuestionsResponse, error) {
	out := new(SuggestQuestionsResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/SuggestQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestInterviewQuestion(ctx context.Context, in *SuggestInterviewQuestionRequest, opts ...grpc.CallOption) (*SuggestInterviewQuestionResponse, error) {
	out := new(SuggestInterviewQuestionResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/SuggestInterviewQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) ScoreInterview(ctx context.Context, in *ScoreInterviewRequest, opts ...grpc.CallOption) (*ScoreInterviewResponse, error) {
	out := new(ScoreInterviewResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/ScoreInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestOutlines(ctx context.Context, in *SuggestOutlinesRequest, opts ...grpc.CallOption) (*SuggestOutlinesResponse, error) {
	out := new(SuggestOutlinesResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/SuggestOutlines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestExamQuestion(ctx context.Context, in *SuggestExamQuestionRequest, opts ...grpc.CallOption) (*SuggestExamQuestionResponse, error) {
	out := new(SuggestExamQuestionResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/SuggestExamQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestExamQuestionV2(ctx context.Context, in *SuggestExamQuestionRequest, opts ...grpc.CallOption) (*SuggestExamQuestionResponseV2, error) {
	out := new(SuggestExamQuestionResponseV2)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/SuggestExamQuestionV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggestServiceServer is the server API for SuggestService service.
// All implementations must embed UnimplementedSuggestServiceServer
// for forward compatibility
type SuggestServiceServer interface {
	SuggestCriteria(context.Context, *SuggestCriteriaRequest) (*SuggestCriteriaResponse, error)
	SuggestOptions(context.Context, *SuggestOptionsRequest) (*SuggestOptionsResponse, error)
	SuggestQuestions(context.Context, *SuggestQuestionsRequest) (*SuggestQuestionsResponse, error)
	SuggestInterviewQuestion(context.Context, *SuggestInterviewQuestionRequest) (*SuggestInterviewQuestionResponse, error)
	ScoreInterview(context.Context, *ScoreInterviewRequest) (*ScoreInterviewResponse, error)
	SuggestOutlines(context.Context, *SuggestOutlinesRequest) (*SuggestOutlinesResponse, error)
	SuggestExamQuestion(context.Context, *SuggestExamQuestionRequest) (*SuggestExamQuestionResponse, error)
	SuggestExamQuestionV2(context.Context, *SuggestExamQuestionRequest) (*SuggestExamQuestionResponseV2, error)
	mustEmbedUnimplementedSuggestServiceServer()
}

// UnimplementedSuggestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuggestServiceServer struct {
}

func (UnimplementedSuggestServiceServer) SuggestCriteria(context.Context, *SuggestCriteriaRequest) (*SuggestCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestCriteria not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestOptions(context.Context, *SuggestOptionsRequest) (*SuggestOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestOptions not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestQuestions(context.Context, *SuggestQuestionsRequest) (*SuggestQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestQuestions not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestInterviewQuestion(context.Context, *SuggestInterviewQuestionRequest) (*SuggestInterviewQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestInterviewQuestion not implemented")
}
func (UnimplementedSuggestServiceServer) ScoreInterview(context.Context, *ScoreInterviewRequest) (*ScoreInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreInterview not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestOutlines(context.Context, *SuggestOutlinesRequest) (*SuggestOutlinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestOutlines not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestExamQuestion(context.Context, *SuggestExamQuestionRequest) (*SuggestExamQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestExamQuestion not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestExamQuestionV2(context.Context, *SuggestExamQuestionRequest) (*SuggestExamQuestionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestExamQuestionV2 not implemented")
}
func (UnimplementedSuggestServiceServer) mustEmbedUnimplementedSuggestServiceServer() {}

// UnsafeSuggestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuggestServiceServer will
// result in compilation errors.
type UnsafeSuggestServiceServer interface {
	mustEmbedUnimplementedSuggestServiceServer()
}

func RegisterSuggestServiceServer(s grpc.ServiceRegistrar, srv SuggestServiceServer) {
	s.RegisterService(&SuggestService_ServiceDesc, srv)
}

func _SuggestService_SuggestCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/SuggestCriteria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestCriteria(ctx, req.(*SuggestCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/SuggestOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestOptions(ctx, req.(*SuggestOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/SuggestQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestQuestions(ctx, req.(*SuggestQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestInterviewQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestInterviewQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestInterviewQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/SuggestInterviewQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestInterviewQuestion(ctx, req.(*SuggestInterviewQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_ScoreInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).ScoreInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/ScoreInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).ScoreInterview(ctx, req.(*ScoreInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestOutlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestOutlinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestOutlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/SuggestOutlines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestOutlines(ctx, req.(*SuggestOutlinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestExamQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestExamQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestExamQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/SuggestExamQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestExamQuestion(ctx, req.(*SuggestExamQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestExamQuestionV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestExamQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestExamQuestionV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/SuggestExamQuestionV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestExamQuestionV2(ctx, req.(*SuggestExamQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuggestService_ServiceDesc is the grpc.ServiceDesc for SuggestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuggestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "suggest.SuggestService",
	HandlerType: (*SuggestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestCriteria",
			Handler:    _SuggestService_SuggestCriteria_Handler,
		},
		{
			MethodName: "SuggestOptions",
			Handler:    _SuggestService_SuggestOptions_Handler,
		},
		{
			MethodName: "SuggestQuestions",
			Handler:    _SuggestService_SuggestQuestions_Handler,
		},
		{
			MethodName: "SuggestInterviewQuestion",
			Handler:    _SuggestService_SuggestInterviewQuestion_Handler,
		},
		{
			MethodName: "ScoreInterview",
			Handler:    _SuggestService_ScoreInterview_Handler,
		},
		{
			MethodName: "SuggestOutlines",
			Handler:    _SuggestService_SuggestOutlines_Handler,
		},
		{
			MethodName: "SuggestExamQuestion",
			Handler:    _SuggestService_SuggestExamQuestion_Handler,
		},
		{
			MethodName: "SuggestExamQuestionV2",
			Handler:    _SuggestService_SuggestExamQuestionV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/suggest/suggest.proto",
}
