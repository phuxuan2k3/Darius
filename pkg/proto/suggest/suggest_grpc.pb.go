// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/suggest/suggest.proto

package suggest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SuggestService_SuggestCriteria_FullMethodName  = "/suggest.SuggestService/SuggestCriteria"
	SuggestService_SuggestOptions_FullMethodName   = "/suggest.SuggestService/SuggestOptions"
	SuggestService_SuggestQuestions_FullMethodName = "/suggest.SuggestService/SuggestQuestions"
)

// SuggestServiceClient is the client API for SuggestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggestServiceClient interface {
	SuggestCriteria(ctx context.Context, in *SuggestCriteriaRequest, opts ...grpc.CallOption) (*SuggestCriteriaResponse, error)
	SuggestOptions(ctx context.Context, in *SuggestOptionsRequest, opts ...grpc.CallOption) (*SuggestOptionsResponse, error)
	SuggestQuestions(ctx context.Context, in *SuggestQuestionsRequest, opts ...grpc.CallOption) (*SuggestQuestionsResponse, error)
}

type suggestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggestServiceClient(cc grpc.ClientConnInterface) SuggestServiceClient {
	return &suggestServiceClient{cc}
}

func (c *suggestServiceClient) SuggestCriteria(ctx context.Context, in *SuggestCriteriaRequest, opts ...grpc.CallOption) (*SuggestCriteriaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestCriteriaResponse)
	err := c.cc.Invoke(ctx, SuggestService_SuggestCriteria_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestOptions(ctx context.Context, in *SuggestOptionsRequest, opts ...grpc.CallOption) (*SuggestOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestOptionsResponse)
	err := c.cc.Invoke(ctx, SuggestService_SuggestOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) SuggestQuestions(ctx context.Context, in *SuggestQuestionsRequest, opts ...grpc.CallOption) (*SuggestQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestQuestionsResponse)
	err := c.cc.Invoke(ctx, SuggestService_SuggestQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggestServiceServer is the server API for SuggestService service.
// All implementations must embed UnimplementedSuggestServiceServer
// for forward compatibility.
type SuggestServiceServer interface {
	SuggestCriteria(context.Context, *SuggestCriteriaRequest) (*SuggestCriteriaResponse, error)
	SuggestOptions(context.Context, *SuggestOptionsRequest) (*SuggestOptionsResponse, error)
	SuggestQuestions(context.Context, *SuggestQuestionsRequest) (*SuggestQuestionsResponse, error)
	mustEmbedUnimplementedSuggestServiceServer()
}

// UnimplementedSuggestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuggestServiceServer struct{}

func (UnimplementedSuggestServiceServer) SuggestCriteria(context.Context, *SuggestCriteriaRequest) (*SuggestCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestCriteria not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestOptions(context.Context, *SuggestOptionsRequest) (*SuggestOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestOptions not implemented")
}
func (UnimplementedSuggestServiceServer) SuggestQuestions(context.Context, *SuggestQuestionsRequest) (*SuggestQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestQuestions not implemented")
}
func (UnimplementedSuggestServiceServer) mustEmbedUnimplementedSuggestServiceServer() {}
func (UnimplementedSuggestServiceServer) testEmbeddedByValue()                        {}

// UnsafeSuggestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuggestServiceServer will
// result in compilation errors.
type UnsafeSuggestServiceServer interface {
	mustEmbedUnimplementedSuggestServiceServer()
}

func RegisterSuggestServiceServer(s grpc.ServiceRegistrar, srv SuggestServiceServer) {
	// If the following call pancis, it indicates UnimplementedSuggestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SuggestService_ServiceDesc, srv)
}

func _SuggestService_SuggestCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuggestService_SuggestCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestCriteria(ctx, req.(*SuggestCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuggestService_SuggestOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestOptions(ctx, req.(*SuggestOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_SuggestQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).SuggestQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuggestService_SuggestQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).SuggestQuestions(ctx, req.(*SuggestQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuggestService_ServiceDesc is the grpc.ServiceDesc for SuggestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuggestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "suggest.SuggestService",
	HandlerType: (*SuggestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestCriteria",
			Handler:    _SuggestService_SuggestCriteria_Handler,
		},
		{
			MethodName: "SuggestOptions",
			Handler:    _SuggestService_SuggestOptions_Handler,
		},
		{
			MethodName: "SuggestQuestions",
			Handler:    _SuggestService_SuggestQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/suggest/suggest.proto",
}
