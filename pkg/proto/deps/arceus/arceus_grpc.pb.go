// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/deps/arceus/arceus.proto

package suggest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArceusClient is the client API for Arceus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArceusClient interface {
	GenerateText(ctx context.Context, in *GenerateTextRequest, opts ...grpc.CallOption) (*GenerateTextResponse, error)
}

type arceusClient struct {
	cc grpc.ClientConnInterface
}

func NewArceusClient(cc grpc.ClientConnInterface) ArceusClient {
	return &arceusClient{cc}
}

func (c *arceusClient) GenerateText(ctx context.Context, in *GenerateTextRequest, opts ...grpc.CallOption) (*GenerateTextResponse, error) {
	out := new(GenerateTextResponse)
	err := c.cc.Invoke(ctx, "/arceus.Arceus/GenerateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArceusServer is the server API for Arceus service.
// All implementations must embed UnimplementedArceusServer
// for forward compatibility
type ArceusServer interface {
	GenerateText(context.Context, *GenerateTextRequest) (*GenerateTextResponse, error)
	mustEmbedUnimplementedArceusServer()
}

// UnimplementedArceusServer must be embedded to have forward compatible implementations.
type UnimplementedArceusServer struct {
}

func (UnimplementedArceusServer) GenerateText(context.Context, *GenerateTextRequest) (*GenerateTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateText not implemented")
}
func (UnimplementedArceusServer) mustEmbedUnimplementedArceusServer() {}

// UnsafeArceusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArceusServer will
// result in compilation errors.
type UnsafeArceusServer interface {
	mustEmbedUnimplementedArceusServer()
}

func RegisterArceusServer(s grpc.ServiceRegistrar, srv ArceusServer) {
	s.RegisterService(&Arceus_ServiceDesc, srv)
}

func _Arceus_GenerateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArceusServer).GenerateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arceus.Arceus/GenerateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArceusServer).GenerateText(ctx, req.(*GenerateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Arceus_ServiceDesc is the grpc.ServiceDesc for Arceus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Arceus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arceus.Arceus",
	HandlerType: (*ArceusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateText",
			Handler:    _Arceus_GenerateText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deps/arceus/arceus.proto",
}
