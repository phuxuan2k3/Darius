// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/deps/bulbasaur/bulbasaur.proto

package bulbasaur

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BulbasaurClient is the client API for Bulbasaur service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BulbasaurClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	FindUserByMetadata(ctx context.Context, in *FindUserByMetadataRequest, opts ...grpc.CallOption) (*FindUserByMetadataResponse, error)
	EmailVerification(ctx context.Context, in *EmailVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetCodeVerification(ctx context.Context, in *ResetCodeVerificationRequest, opts ...grpc.CallOption) (*ResetCodeVerificationResponse, error)
	GenerateResetCode(ctx context.Context, in *GenerateResetCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IncreaseBalance(ctx context.Context, in *IncreaseBalanceRequest, opts ...grpc.CallOption) (*IncreaseBalanceResponse, error)
}

type bulbasaurClient struct {
	cc grpc.ClientConnInterface
}

func NewBulbasaurClient(cc grpc.ClientConnInterface) BulbasaurClient {
	return &bulbasaurClient{cc}
}

func (c *bulbasaurClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) FindUserByMetadata(ctx context.Context, in *FindUserByMetadataRequest, opts ...grpc.CallOption) (*FindUserByMetadataResponse, error) {
	out := new(FindUserByMetadataResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/FindUserByMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) EmailVerification(ctx context.Context, in *EmailVerificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/EmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) ResetCodeVerification(ctx context.Context, in *ResetCodeVerificationRequest, opts ...grpc.CallOption) (*ResetCodeVerificationResponse, error) {
	out := new(ResetCodeVerificationResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/ResetCodeVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) GenerateResetCode(ctx context.Context, in *GenerateResetCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/GenerateResetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulbasaurClient) IncreaseBalance(ctx context.Context, in *IncreaseBalanceRequest, opts ...grpc.CallOption) (*IncreaseBalanceResponse, error) {
	out := new(IncreaseBalanceResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Bulbasaur/IncreaseBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BulbasaurServer is the server API for Bulbasaur service.
// All implementations must embed UnimplementedBulbasaurServer
// for forward compatibility
type BulbasaurServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	FindUserByMetadata(context.Context, *FindUserByMetadataRequest) (*FindUserByMetadataResponse, error)
	EmailVerification(context.Context, *EmailVerificationRequest) (*emptypb.Empty, error)
	ResetCodeVerification(context.Context, *ResetCodeVerificationRequest) (*ResetCodeVerificationResponse, error)
	GenerateResetCode(context.Context, *GenerateResetCodeRequest) (*emptypb.Empty, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error)
	IncreaseBalance(context.Context, *IncreaseBalanceRequest) (*IncreaseBalanceResponse, error)
	mustEmbedUnimplementedBulbasaurServer()
}

// UnimplementedBulbasaurServer must be embedded to have forward compatible implementations.
type UnimplementedBulbasaurServer struct {
}

func (UnimplementedBulbasaurServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedBulbasaurServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedBulbasaurServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedBulbasaurServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBulbasaurServer) FindUserByMetadata(context.Context, *FindUserByMetadataRequest) (*FindUserByMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByMetadata not implemented")
}
func (UnimplementedBulbasaurServer) EmailVerification(context.Context, *EmailVerificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailVerification not implemented")
}
func (UnimplementedBulbasaurServer) ResetCodeVerification(context.Context, *ResetCodeVerificationRequest) (*ResetCodeVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCodeVerification not implemented")
}
func (UnimplementedBulbasaurServer) GenerateResetCode(context.Context, *GenerateResetCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateResetCode not implemented")
}
func (UnimplementedBulbasaurServer) ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedBulbasaurServer) IncreaseBalance(context.Context, *IncreaseBalanceRequest) (*IncreaseBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseBalance not implemented")
}
func (UnimplementedBulbasaurServer) mustEmbedUnimplementedBulbasaurServer() {}

// UnsafeBulbasaurServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BulbasaurServer will
// result in compilation errors.
type UnsafeBulbasaurServer interface {
	mustEmbedUnimplementedBulbasaurServer()
}

func RegisterBulbasaurServer(s grpc.ServiceRegistrar, srv BulbasaurServer) {
	s.RegisterService(&Bulbasaur_ServiceDesc, srv)
}

func _Bulbasaur_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_FindUserByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).FindUserByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/FindUserByMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).FindUserByMetadata(ctx, req.(*FindUserByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_EmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).EmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/EmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).EmailVerification(ctx, req.(*EmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_ResetCodeVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCodeVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).ResetCodeVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/ResetCodeVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).ResetCodeVerification(ctx, req.(*ResetCodeVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_GenerateResetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateResetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).GenerateResetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/GenerateResetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).GenerateResetCode(ctx, req.(*GenerateResetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bulbasaur_IncreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulbasaurServer).IncreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Bulbasaur/IncreaseBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulbasaurServer).IncreaseBalance(ctx, req.(*IncreaseBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bulbasaur_ServiceDesc is the grpc.ServiceDesc for Bulbasaur service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bulbasaur_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bulbasaur.Bulbasaur",
	HandlerType: (*BulbasaurServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _Bulbasaur_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Bulbasaur_SignIn_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Bulbasaur_RefreshToken_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Bulbasaur_ListUsers_Handler,
		},
		{
			MethodName: "FindUserByMetadata",
			Handler:    _Bulbasaur_FindUserByMetadata_Handler,
		},
		{
			MethodName: "EmailVerification",
			Handler:    _Bulbasaur_EmailVerification_Handler,
		},
		{
			MethodName: "ResetCodeVerification",
			Handler:    _Bulbasaur_ResetCodeVerification_Handler,
		},
		{
			MethodName: "GenerateResetCode",
			Handler:    _Bulbasaur_GenerateResetCode_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Bulbasaur_ResetPassword_Handler,
		},
		{
			MethodName: "IncreaseBalance",
			Handler:    _Bulbasaur_IncreaseBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deps/bulbasaur/bulbasaur.proto",
}

// IvysaurClient is the client API for Ivysaur service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IvysaurClient interface {
	UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Me(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MeResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	SetPremium(ctx context.Context, in *SetPremiumRequest, opts ...grpc.CallOption) (*SetPremiumResponse, error)
	GetTransactionHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
}

type ivysaurClient struct {
	cc grpc.ClientConnInterface
}

func NewIvysaurClient(cc grpc.ClientConnInterface) IvysaurClient {
	return &ivysaurClient{cc}
}

func (c *ivysaurClient) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bulbasaur.Ivysaur/UpdateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ivysaurClient) Me(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MeResponse, error) {
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Ivysaur/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ivysaurClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bulbasaur.Ivysaur/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ivysaurClient) LogOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bulbasaur.Ivysaur/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ivysaurClient) GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Ivysaur/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ivysaurClient) SetPremium(ctx context.Context, in *SetPremiumRequest, opts ...grpc.CallOption) (*SetPremiumResponse, error) {
	out := new(SetPremiumResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Ivysaur/SetPremium", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ivysaurClient) GetTransactionHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Ivysaur/GetTransactionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IvysaurServer is the server API for Ivysaur service.
// All implementations must embed UnimplementedIvysaurServer
// for forward compatibility
type IvysaurServer interface {
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*emptypb.Empty, error)
	Me(context.Context, *emptypb.Empty) (*MeResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error)
	LogOut(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetBalance(context.Context, *emptypb.Empty) (*GetBalanceResponse, error)
	SetPremium(context.Context, *SetPremiumRequest) (*SetPremiumResponse, error)
	GetTransactionHistory(context.Context, *emptypb.Empty) (*GetTransactionHistoryResponse, error)
	mustEmbedUnimplementedIvysaurServer()
}

// UnimplementedIvysaurServer must be embedded to have forward compatible implementations.
type UnimplementedIvysaurServer struct {
}

func (UnimplementedIvysaurServer) UpdateMetadata(context.Context, *UpdateMetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (UnimplementedIvysaurServer) Me(context.Context, *emptypb.Empty) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedIvysaurServer) ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedIvysaurServer) LogOut(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedIvysaurServer) GetBalance(context.Context, *emptypb.Empty) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedIvysaurServer) SetPremium(context.Context, *SetPremiumRequest) (*SetPremiumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPremium not implemented")
}
func (UnimplementedIvysaurServer) GetTransactionHistory(context.Context, *emptypb.Empty) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedIvysaurServer) mustEmbedUnimplementedIvysaurServer() {}

// UnsafeIvysaurServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IvysaurServer will
// result in compilation errors.
type UnsafeIvysaurServer interface {
	mustEmbedUnimplementedIvysaurServer()
}

func RegisterIvysaurServer(s grpc.ServiceRegistrar, srv IvysaurServer) {
	s.RegisterService(&Ivysaur_ServiceDesc, srv)
}

func _Ivysaur_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IvysaurServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Ivysaur/UpdateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IvysaurServer).UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ivysaur_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IvysaurServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Ivysaur/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IvysaurServer).Me(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ivysaur_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IvysaurServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Ivysaur/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IvysaurServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ivysaur_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IvysaurServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Ivysaur/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IvysaurServer).LogOut(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ivysaur_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IvysaurServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Ivysaur/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IvysaurServer).GetBalance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ivysaur_SetPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IvysaurServer).SetPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Ivysaur/SetPremium",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IvysaurServer).SetPremium(ctx, req.(*SetPremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ivysaur_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IvysaurServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Ivysaur/GetTransactionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IvysaurServer).GetTransactionHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Ivysaur_ServiceDesc is the grpc.ServiceDesc for Ivysaur service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ivysaur_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bulbasaur.Ivysaur",
	HandlerType: (*IvysaurServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetadata",
			Handler:    _Ivysaur_UpdateMetadata_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _Ivysaur_Me_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Ivysaur_ChangePassword_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _Ivysaur_LogOut_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Ivysaur_GetBalance_Handler,
		},
		{
			MethodName: "SetPremium",
			Handler:    _Ivysaur_SetPremium_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _Ivysaur_GetTransactionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deps/bulbasaur/bulbasaur.proto",
}

// VenusaurClient is the client API for Venusaur service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VenusaurClient interface {
	FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...grpc.CallOption) (*FindUserByNameResponse, error)
	IncreaseBalance(ctx context.Context, in *IncreaseBalanceRequest, opts ...grpc.CallOption) (*IncreaseBalanceResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	DecreaseBalance(ctx context.Context, in *DecreaseBalanceRequest, opts ...grpc.CallOption) (*DecreaseBalanceResponse, error)
	StartTransaction(ctx context.Context, in *StartTransactionRequest, opts ...grpc.CallOption) (*StartTransactionResponse, error)
	CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommitTransactionResponse, error)
}

type venusaurClient struct {
	cc grpc.ClientConnInterface
}

func NewVenusaurClient(cc grpc.ClientConnInterface) VenusaurClient {
	return &venusaurClient{cc}
}

func (c *venusaurClient) FindUserByName(ctx context.Context, in *FindUserByNameRequest, opts ...grpc.CallOption) (*FindUserByNameResponse, error) {
	out := new(FindUserByNameResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Venusaur/FindUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venusaurClient) IncreaseBalance(ctx context.Context, in *IncreaseBalanceRequest, opts ...grpc.CallOption) (*IncreaseBalanceResponse, error) {
	out := new(IncreaseBalanceResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Venusaur/IncreaseBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venusaurClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Venusaur/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venusaurClient) DecreaseBalance(ctx context.Context, in *DecreaseBalanceRequest, opts ...grpc.CallOption) (*DecreaseBalanceResponse, error) {
	out := new(DecreaseBalanceResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Venusaur/DecreaseBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venusaurClient) StartTransaction(ctx context.Context, in *StartTransactionRequest, opts ...grpc.CallOption) (*StartTransactionResponse, error) {
	out := new(StartTransactionResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Venusaur/StartTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venusaurClient) CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommitTransactionResponse, error) {
	out := new(CommitTransactionResponse)
	err := c.cc.Invoke(ctx, "/bulbasaur.Venusaur/CommitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VenusaurServer is the server API for Venusaur service.
// All implementations must embed UnimplementedVenusaurServer
// for forward compatibility
type VenusaurServer interface {
	FindUserByName(context.Context, *FindUserByNameRequest) (*FindUserByNameResponse, error)
	IncreaseBalance(context.Context, *IncreaseBalanceRequest) (*IncreaseBalanceResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	DecreaseBalance(context.Context, *DecreaseBalanceRequest) (*DecreaseBalanceResponse, error)
	StartTransaction(context.Context, *StartTransactionRequest) (*StartTransactionResponse, error)
	CommitTransaction(context.Context, *CommitTransactionRequest) (*CommitTransactionResponse, error)
	mustEmbedUnimplementedVenusaurServer()
}

// UnimplementedVenusaurServer must be embedded to have forward compatible implementations.
type UnimplementedVenusaurServer struct {
}

func (UnimplementedVenusaurServer) FindUserByName(context.Context, *FindUserByNameRequest) (*FindUserByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByName not implemented")
}
func (UnimplementedVenusaurServer) IncreaseBalance(context.Context, *IncreaseBalanceRequest) (*IncreaseBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseBalance not implemented")
}
func (UnimplementedVenusaurServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedVenusaurServer) DecreaseBalance(context.Context, *DecreaseBalanceRequest) (*DecreaseBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseBalance not implemented")
}
func (UnimplementedVenusaurServer) StartTransaction(context.Context, *StartTransactionRequest) (*StartTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTransaction not implemented")
}
func (UnimplementedVenusaurServer) CommitTransaction(context.Context, *CommitTransactionRequest) (*CommitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedVenusaurServer) mustEmbedUnimplementedVenusaurServer() {}

// UnsafeVenusaurServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VenusaurServer will
// result in compilation errors.
type UnsafeVenusaurServer interface {
	mustEmbedUnimplementedVenusaurServer()
}

func RegisterVenusaurServer(s grpc.ServiceRegistrar, srv VenusaurServer) {
	s.RegisterService(&Venusaur_ServiceDesc, srv)
}

func _Venusaur_FindUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenusaurServer).FindUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Venusaur/FindUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenusaurServer).FindUserByName(ctx, req.(*FindUserByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Venusaur_IncreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenusaurServer).IncreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Venusaur/IncreaseBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenusaurServer).IncreaseBalance(ctx, req.(*IncreaseBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Venusaur_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenusaurServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Venusaur/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenusaurServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Venusaur_DecreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenusaurServer).DecreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Venusaur/DecreaseBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenusaurServer).DecreaseBalance(ctx, req.(*DecreaseBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Venusaur_StartTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenusaurServer).StartTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Venusaur/StartTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenusaurServer).StartTransaction(ctx, req.(*StartTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Venusaur_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenusaurServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bulbasaur.Venusaur/CommitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenusaurServer).CommitTransaction(ctx, req.(*CommitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Venusaur_ServiceDesc is the grpc.ServiceDesc for Venusaur service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Venusaur_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bulbasaur.Venusaur",
	HandlerType: (*VenusaurServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserByName",
			Handler:    _Venusaur_FindUserByName_Handler,
		},
		{
			MethodName: "IncreaseBalance",
			Handler:    _Venusaur_IncreaseBalance_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Venusaur_GetBalance_Handler,
		},
		{
			MethodName: "DecreaseBalance",
			Handler:    _Venusaur_DecreaseBalance_Handler,
		},
		{
			MethodName: "StartTransaction",
			Handler:    _Venusaur_StartTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _Venusaur_CommitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deps/bulbasaur/bulbasaur.proto",
}
