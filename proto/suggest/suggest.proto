syntax = "proto3";

package suggest;

option go_package = "myproject/pkg/suggest";

import "google/api/annotations.proto";
import "google/protobuf/any.proto";

service SuggestService {
    rpc SuggestCriteria (SuggestCriteriaRequest) returns (SuggestCriteriaResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_criteria"
        body: "*"
        };
    }

    rpc SuggestOptions (SuggestOptionsRequest) returns (SuggestOptionsResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_options"
        body: "*"
        };
    }

    rpc SuggestQuestions (SuggestQuestionsRequest) returns (SuggestQuestionsResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_questions"
        body: "*"
        };
    }

    rpc SuggestInterviewQuestion (SuggestInterviewQuestionRequest) returns (SuggestInterviewQuestionResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_interview_question"
        body: "*"
        };
    }

    rpc ScoreInterview(ScoreInterviewRequest) returns (ScoreInterviewResponse) {
        option (google.api.http) = {
        post: "/v1/score_interview"
        body: "*"
        };
    }

    rpc SuggestOutlines(SuggestOutlinesRequest) returns (SuggestOutlinesResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_outlines"
        body: "*"
        };
    }

    rpc SuggestExamQuestion(SuggestExamQuestionRequest) returns (SuggestExamQuestionResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_exam_question"
        body: "*"
        };
    }

    rpc SuggestExamQuestionV2(SuggestExamQuestionRequest) returns (SuggestExamQuestionResponseV2) {
        option (google.api.http) = {
        post: "/v2/suggest_exam_question"
        body: "*"
        };
    }
} 

// id: number;
// testId: string;
// text: string;
// points: number;
// type: "MCQ" | "LONG_ANSWER";
// detail: QuestionDetailCommonSchema;
message SuggestExamQuestionResponseV2 {
    message Quetion{
    int32 id = 1; // Unique identifier for the question
    string testId = 2; // Identifier for the test this question belongs to
    string text = 3; // The question text
    int32 points = 4; // Points assigned to the question
    string type = 5; // Type of question: "MCQ" for multiple choice, "LONG_ANSWER" for long answer

    message Detail {
        oneof detail_type {
            McqDetailCommonSchema mcq = 1;
            LongAnswerDetailCommonSchema longAnswer = 2;
        }
    }

    message McqDetailCommonSchema{
        string type = 1; // Type of question, e.g., "MCQ"
        repeated string options = 2; // List of options for the MCQ
        int32 correctOption = 3; // Index of the correct option, null if not applicable
    }

 
    message LongAnswerDetailCommonSchema{
        string type = 1; // Type of question, e.g., "LONG_ANSWER"
        repeated string imageLinks = 2; // Optional links to images related to the question
        string extraText = 3; // Optional additional text for context
        string correctAnswer = 4; // The correct answer for long answer questions
    }

    google.protobuf.Any detail = 6; // Flexible detail field that can contain either MCQ or Long Answer}
    }

    repeated Quetion questions = 1; // List of questions in the response
}
message DifficultyDistribution {
    int32 Intern = 1;
    int32 Junior = 2;
    int32 Middle = 3;
    int32 Senior = 4;
    int32 Lead = 5;
    int32 Expert = 6;
}

message Topic {
    string name = 1;
    DifficultyDistribution difficultyDistribution = 2;
}

message SuggestExamQuestionRequest {
    string title = 1;
    string description = 2;
    string language = 3; // English, Vietnamese, ...
    string seniority = 4; // Intern, Junior, Middle, Senior, Lead, ...
    repeated Topic topics = 5;
    int32 creativity = 6; // Creativity level from 1 to 10
    message Context {
        string text = 1;
        repeated string links = 2; // External links
    }
    Context context = 7;
}

message SuggestExamQuestionResponse {
    repeated Question questions = 1;
}



message SuggestOutlinesRequest {
    string title = 1;
    string description = 2;
    string difficulty = 3;
    repeated string tags = 4;
    repeated string outlines = 5; // Những gợi ý đã điền
}
message SuggestOutlinesResponse {
    repeated string outlines = 1; // Gợi ý từ LLM, khoảng 1 - 3 items
}

message SuggestInterviewQuestionRequest {
    message Context {
        string position = 1;
        string experience = 2;
        string language = 3;
        string models = 4;
        int32 speed = 5;
        repeated string skills = 6;
        int32 maxQuestions = 7;
        bool skipIntro = 8;
        bool skipCode = 9;
        string interviewId = 10;
    }
    message Submission {
        string question = 1;
        string answer = 2;
    }
    Context context = 1;
    repeated Submission submissions = 2;
    int32 remainingQuestions = 3;
}

message SuggestInterviewQuestionResponse {
    repeated string questions = 1;
}

message GeneralInfo {
    string title = 1;
    string description = 2;
    string duration =3;
    string difficulty = 4;
    int32 maxNumberOfQuestions = 5;
}

message CriteriaEleRequest {
    string criteria =1;
    string chosenOption =2;
}


message SuggestCriteriaRequest {
    GeneralInfo generalInfo = 1;
    repeated CriteriaEleRequest criteriaList = 2;
}

message CriteriaEleResponse {
    string criteria =1;
    repeated string optionList =2;
}

message SuggestCriteriaResponse {
    repeated CriteriaEleResponse criteriaList = 1;
}

message SuggestOptionsRequest {
    GeneralInfo generalInfo = 1;
    repeated CriteriaEleRequest criteriaList = 2;
    string newCriteria = 3;
}

message SuggestOptionsResponse {
    CriteriaEleResponse criteriaList = 1;
}

message AnswerOption {
    string optionContent = 1;
    bool isCorrect = 2;
}

message Question {
    string text = 1;
    repeated string options = 2;
    int32 points = 3;
    int32 correctOption = 4;
}

message SuggestQuestionsResponse {
    repeated Question questions = 1;
}

message SuggestQuestionsRequest {
    string title = 1;
    string description = 2;
    int32 minutesToAnswer = 3;
    string language = 4;
    string difficulty = 5;
    repeated string tags = 6;
    repeated string outlines = 7; 
    int32 numberOfQuestions = 8; 
    int32 numberOfOptions = 9;
}

message ScoreInterviewRequest {
    message Submission {
        int32 index = 1;
        string question = 2;
        string answer = 3;
    }
    repeated Submission submissions = 1;
    repeated string skills = 2;
}

message ScoreInterviewResponse {
    message Submission{
        int32 index = 1;
        string comment = 2;
        string score = 3;
    }
    repeated Submission result = 1;
    message SkillScore {
        string skill = 1;
        string score = 2;
    }
    repeated SkillScore skills = 2;
    map<string, int32> totalScore = 3;
    string positiveFeedback =4;
    string actionableFeedback = 5;
    string finalComment = 6;
}

