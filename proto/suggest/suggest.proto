syntax = "proto3";

package suggest;

option go_package = "myproject/pkg/suggest";

import "google/api/annotations.proto";

service SuggestService {
    rpc SuggestCriteria (SuggestCriteriaRequest) returns (SuggestCriteriaResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_criteria"
        body: "*"
        };
    }

    rpc SuggestOptions (SuggestOptionsRequest) returns (SuggestOptionsResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_options"
        body: "*"
        };
    }

    rpc SuggestQuestions (SuggestQuestionsRequest) returns (SuggestQuestionsResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_questions"
        body: "*"
        };
    }

    rpc SuggestInterviewQuestion (SuggestInterviewQuestionRequest) returns (SuggestInterviewQuestionResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_interview_question"
        body: "*"
        };
    }

    rpc ScoreInterview(ScoreInterviewRequest) returns (ScoreInterviewResponse) {
        option (google.api.http) = {
        post: "/v1/score_interview"
        body: "*"
        };
    }

    rpc SuggestOutlines(SuggestOutlinesRequest) returns (SuggestOutlinesResponse) {
        option (google.api.http) = {
        post: "/v1/suggest_outlines"
        body: "*"
        };
    }
} 

message SuggestOutlinesRequest {
    string title = 1;
    string description = 2;
    string difficulty = 3;
    repeated string tags = 4;
    repeated string outlines = 5; // Những gợi ý đã điền
}
message SuggestOutlinesResponse {
    repeated string outlines = 1; // Gợi ý từ LLM, khoảng 1 - 3 items
}

message SuggestInterviewQuestionRequest {
    message Context {
        string position = 1;
        string experience = 2;
        string language = 3;
        string models = 4;
        int32 speed = 5;
        string skills = 6;
        int32 maxQuestions = 7;
        bool skipIntro = 8;
        bool skipCode = 9;
        string interviewId = 10;
    }
    message Submission {
        string question = 1;
        string answer = 2;
    }
    Context context = 1;
    repeated Submission submissions = 2;
    int32 remainingQuestions = 3;
}

message SuggestInterviewQuestionResponse {
    repeated string questions = 1;
}

message GeneralInfo {
    string title = 1;
    string description = 2;
    string duration =3;
    string difficulty = 4;
    int32 maxNumberOfQuestions = 5;
}

message CriteriaEleRequest {
    string criteria =1;
    string chosenOption =2;
}


message SuggestCriteriaRequest {
    GeneralInfo generalInfo = 1;
    repeated CriteriaEleRequest criteriaList = 2;
}

message CriteriaEleResponse {
    string criteria =1;
    repeated string optionList =2;
}

message SuggestCriteriaResponse {
    repeated CriteriaEleResponse criteriaList = 1;
}

message SuggestOptionsRequest {
    GeneralInfo generalInfo = 1;
    repeated CriteriaEleRequest criteriaList = 2;
    string newCriteria = 3;
}

message SuggestOptionsResponse {
    CriteriaEleResponse criteriaList = 1;
}

message AnswerOption {
    string optionContent = 1;
    bool isCorrect = 2;
}

message Question {
    string questionContent = 1;
    repeated AnswerOption optionList = 2;
}

// message SuggestQuestionsRequest {
//     GeneralInfo generalInfo = 1;
//     repeated CriteriaEleRequest criteriaList = 2;
// }

message SuggestQuestionsResponse {
    repeated Question questionList = 1;
}

message SuggestQuestionsRequest {
    string name = 1;
    string description =2;
    repeated string fields = 3;
    string duration = 4;
    string difficulty = 5;
    string question_type = 6;
    string language = 7;
    int32 options = 8;
    int32 number_of_question = 9;
    string candidate_seniority = 10;
    string context = 11;   
}

message ScoreInterviewRequest {
    message Submission {
        int32 index = 1;
        string question = 2;
        string answer = 3;
    }
    repeated Submission submissions = 1;
}

message ScoreInterviewResponse {
    message Submission{
        int32 index = 1;
        string comment = 2;
        string score = 3;
    }
    repeated Submission result = 1;
    map<string, int32> totalScore = 2;
    string positiveFeedback = 3;
    string actionableFeedback = 4;
    string finalComment = 5;
}